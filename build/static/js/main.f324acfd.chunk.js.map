{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["ColorWrapper","memo","columns","rows","verticalMap","Array","from","keys","horizontalMap","width","className","map","x","y","key","color","Math","floor","random","toString","Color","style","backgroundColor","height","window","innerHeight","Filter","filter","setFilter","Select","value","onChange","e","target","label","col","Checkbox","type","checked","darker","useState","darkerRate","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iRAyBA,IAAMA,EAAiCC,gBAAK,YAAwB,IAArBC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAGhDC,EAA6BC,MAAMC,KAAKD,MAAMH,GAASK,QACvDC,EAA+BH,MAAMC,KAAKD,MAAMF,GAAMI,QAEtDE,GAAU,KAAOP,EAAU,IAAIA,EAErC,OACE,yBAAKQ,UAAU,WACdF,EAAcG,KAAI,SAAAC,GAAC,OAClBR,EAAYO,KAAI,SAAAE,GAAC,OACf,kBAAC,EAAD,CAAOC,IAAG,UAAKF,EAAL,YAAUC,GAAKE,MAftB,IAAIC,KAAKC,MAAoB,SAAdD,KAAKE,UAAmBC,SAAS,IAeFV,MAAOA,EAAON,KAAMA,cAOvEiB,EAAwB,SAAC,GAAD,IAAGL,EAAH,EAAGA,MAAON,EAAV,EAAUA,MAAON,EAAjB,EAAiBA,KAAjB,OAC5B,yBAAKO,UAAU,QAAQW,MAAO,CAAEC,gBAAiBP,EAAON,MAAOA,EAAM,IAAKc,QAASC,OAAOC,YAAc,IAAItB,IACzGY,IAICW,EAAyB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAExC,OACE,yBAAKlB,UAAU,UACb,kBAAC,EAAD,CAAQiB,OAAQA,EAAQC,UAAWA,IACnC,kBAAC,EAAD,CAAUD,OAAQA,EAAQC,UAAWA,MAKrCC,EAAyB,SAAC,GAA2B,IAAzBF,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAcxC,OACE,4BAAQE,MAAOH,EAAOZ,MAAOgB,SAAU,SAAAC,GAAC,OAAIJ,EAAU,eAAKD,EAAN,CAAcZ,MAAOiB,EAAEC,OAAOH,WAb/B,CACpD,CAACI,MAAO,MAAOnB,MAAO,WACtB,CAACmB,MAAO,QAASnB,MAAO,WACxB,CAACmB,MAAO,SAAUnB,MAAO,WACzB,CAACmB,MAAO,OAAQnB,MAAO,WACvB,CAACmB,MAAO,QAASnB,MAAO,WACxB,CAACmB,MAAO,OAAQnB,MAAO,WACvB,CAACmB,MAAO,SAAUnB,MAAO,WACzB,CAACmB,MAAO,OAAQnB,MAAO,WACvB,CAACmB,MAAO,QAASnB,MAAO,KAKfJ,KAAI,SAAAwB,GAAG,OACZ,4BAAQrB,IAAKqB,EAAID,MAAOJ,MAAOK,EAAIpB,OAAQoB,EAAID,YAMjDE,EAA2B,SAAC,GAA2B,IAAzBT,EAAwB,EAAxBA,OAAQC,EAAgB,EAAhBA,UAC1C,OACE,2BAAOlB,UAAU,YACf,2BAAO2B,KAAK,WAAWC,QAASX,EAAOY,OAAQR,SAAU,kBAAMH,EAAU,eAAKD,EAAN,CAAcY,QAASZ,EAAOY,aADxG,WA2BWtC,sBApBf,WAEE,IAFa,EAKgBuC,mBAAS,CACpCzB,MAAO,GACPwB,QAAQ,EACRE,WAAY,MARD,mBAKNd,EALM,KAKEC,EALF,KAWb,OACE,yBAAKlB,UAAU,OACX,6CACA,kBAAC,EAAD,CAAQiB,OAAQA,EAAQC,UAAWA,IACnC,kBAAC5B,EAAD,CAAcE,QAbI,EAacC,KAZjB,QCnFHuC,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f324acfd.chunk.js","sourcesContent":["import React, { memo, FC, useState } from \"react\"\nimport \"./App.css\"\n\n\ninterface WrapperProps {\n  columns: number;\n  rows: number;\n}\n\ninterface StateProps {\n  filter: any;\n  setFilter: Function;\n}\ninterface ColorProps {\n  key: string;\n  color: string;\n  width: number;\n  rows: number;\n}\n\n//function for generate color\nfunction generateColor() {\n    return '#'+Math.floor(Math.random()*16777215).toString(16);\n}\n\nconst ColorWrapper: FC<WrapperProps> = memo(({ columns, rows }) => {\n  \n  //generate array for looping\n  const verticalMap: Array<number> = Array.from(Array(columns).keys())\n  const horizontalMap: Array<number> = Array.from(Array(rows).keys())\n  //calculate width by columns and spent 1% for space eachother\n  const width = ((100 - (columns - 1))/columns)\n\n  return (\n    <div className=\"wrapper\">\n    {horizontalMap.map(x => (\n      verticalMap.map(y => (\n        <Color key={`${x}-${y}`} color={generateColor()} width={width} rows={rows} />\n      ))         \n    ))}\n    </div>\n  )\n})\n\nconst Color: FC<ColorProps> = ({ color, width, rows }) => (\n  <div className=\"color\" style={{ backgroundColor: color, width: width+'%', height: (window.innerHeight - 70)/rows }}>\n    {color}\n  </div>\n)\n\nconst Filter: FC<StateProps> = ({ filter, setFilter }) => {\n\n  return (\n    <div className=\"filter\">\n      <Select filter={filter} setFilter={setFilter} />\n      <Checkbox filter={filter} setFilter={setFilter} />\n    </div>\n  )\n}\n\nconst Select: FC<StateProps> = ({ filter, setFilter }) => {\n\n  const color: Array<{label: string, color: string }> = [\n    {label: \"red\", color: \"#ff0000\"},\n    {label: \"green\", color: \"#008000\"},\n    {label: \"yellow\", color: \"#ffff00\"},\n    {label: \"blue\", color: \"#0000ff\"},\n    {label: \"brown\", color: \"#a52a2a\"},\n    {label: \"gray\", color: \"#808080\"},\n    {label: \"purple\", color: \"#800080\"},\n    {label: \"pink\", color: \"#ffc0cb\"},\n    {label: \"other\", color: \"\"},\n  ]\n\n  return (\n    <select value={filter.color} onChange={e => setFilter({ ...filter, color: e.target.value })}>\n      {color.map(col => (\n        <option key={col.label} value={col.color}>{col.label}</option>\n      ))}\n    </select>\n  )\n}\n\nconst Checkbox: FC<StateProps> = ({ filter, setFilter }) => {  \n  return (\n    <label className=\"checkbox\">\n      <input type=\"checkbox\" checked={filter.darker} onChange={() => setFilter({ ...filter, darker: !filter.darker })} />      \n      Darker\n    </label>\n  )\n}\n\nfunction App() {\n  //define columns and rowsfor color\n  const columns: number = 5\n  const rows: number = 8\n\n  const [filter, setFilter]  = useState({\n    color: \"\",\n    darker: false,\n    darkerRate: '0'\n  })\n\n  return (\n    <div className=\"App\">\n        <h1>Gallery color</h1>\n        <Filter filter={filter} setFilter={setFilter} />\n        <ColorWrapper columns={columns} rows={rows} />\n    </div>\n  )\n}\n\nexport default memo(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}